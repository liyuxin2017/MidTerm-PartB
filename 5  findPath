	public ArrayList<Cell> findPath(int[][] maze) {
		ArrayList<Cell> result = new ArrayList<Cell>();
		findPath(maze, 0, 0, result);
		return result;
	}

	public static void findPath(int[][] maze, int row, int column, ArrayList<Cell> result) {
		result.add(new Cell(row, column));
		if (result.size() == (maze.length * 2 - 1))
			return;
		if (row + 1 == maze.length && maze[row][column + 1] == 0) {
			result.remove(result.size() - 1);
			return;
		}
		if (column + 1 == maze.length && maze[row + 1][column] == 0) {
			result.remove(result.size() - 1);
			return;
		}
		if (row + 1 < maze.length && column + 1 < maze.length)
			if (maze[row + 1][column] == 0 && maze[row][column + 1] == 0) {
				result.remove(result.size() - 1);
				return;
			}
		// No need to have the for loop and if condition
		// just findPath(maze, row + 1, column, result); findPath(maze, row, column + 1, result);
		for (int i = 0; i < 2; i++)
			if (row + i < maze.length && column + (1 - i) < maze.length)
				if (maze[row + i][column + (1 - i)] == 1)
					findPath(maze, row + i, column + (1 - i), result);
		if (result.size() != (maze.length * 2 - 1))
			result.remove(result.size() - 1);
	}
